name: Code Test

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  test_for_linux:
    name: Code test
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    strategy:
      fail-fast: false
      matrix:
        os:
          - 'ubuntu-latest'
        python-version:
          - '3.5'
          - '3.6'
          - '3.7'
          - '3.8'
          - '3.9'
          - 'pypy3'
        java-version:
          - '8'
        plantuml-server-version:
          - 'latest'
          - 'jetty-v1.2021.14'
          - 'jetty-v1.2020.19'
          - 'jetty-v1.2019.11'
        plantuml-version:
          - '1.2021.12'
        assistant-plantuml-version:
          - '1.2021.12'
          - '1.2020.19'
          - '1.2019.13'
          - '1.2018.14'
          - '1.2017.20'

    services:
      plantuml:
        image: plantuml/plantuml-server:${{ matrix.plantuml-server-version }}
        ports:
          - 18080:8080

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 20
      - name: Set up system dependences on linux
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y tree cloc wget curl make
          sudo apt-get install -y graphviz
          sudo dot -c
          sudo apt-get install -y libxml2-dev libxslt-dev python-dev  # need by pypy3
      - name: Load testfile
        env:
          TESTFILE_VERSION: 0.0.1
        run: |
          git clone "https://github.com/HansBug/plantumlcli-testfile" "demo"
      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up java ${{ matrix.java-version }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade flake8 setuptools wheel twine
          pip install -r requirements.txt
          pip install -r requirements-test.txt
      - name: Test the basic environment
        run: |
          python -V
          pip --version  
          pip list
          java -version
          javac -version
          tree .
          cloc plantuml
          cloc test
      - name: Test the plantuml in use (${{ matrix.plantuml-version }} and ${{ matrix.assistant-plantuml-version }})
        env:
          TEST_PLANTUML_HOST: http://localhost:18080
        run: |
          java -jar demo/jar/plantuml.${{ matrix.plantuml-version }}.jar -version
          java -jar demo/jar/plantuml.${{ matrix.assistant-plantuml-version }}.jar -version
          curl -L "${TEST_PLANTUML_HOST}/txt/SoWkIImgAStDuNBAJrBGjLDmpCbCJbMmKiX8pSd9vt98pKi1IG80"
      - name: Run unittest
        env:
          PRIMARY_JAR_VERSION: ${{ matrix.plantuml-version }}
          ASSISTANT_JAR_VERSION: ${{ matrix.assistant-plantuml-version }}
          TEST_PLANTUML_HOST: http://localhost:18080
          WORKERS: 4
        run: |
          source env.sh
          make unittest WORKERS=${WORKERS}
      - name: Run benchmark
        env:
          PRIMARY_JAR_VERSION: ${{ matrix.plantuml-version }}
          ASSISTANT_JAR_VERSION: ${{ matrix.assistant-plantuml-version }}
          TEST_PLANTUML_HOST: http://localhost:18080
        run: |
          source env.sh
          make benchmark
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
